week3b -> connecting the frontend with the backend and databases

Authentication {
    1. Hashing {
        - Function that converts password into a strange format that is stored in the database.
        - Encrypting the string password into a strange Encrypted password.
        - An X password will always have a Y hashed password.
        - You can always convert string to hash but not a hash into a string.
        - Its a little different than encryption as an encrypted message can always be decrypted but it is not the same for hashed. A hashed message can never be decrypted it is one way.
    }
    
    2. JSON Web Tokens {
        - JSON  : Hashing working in JSON format ("aryanc381": "idfhfsdioffhowejiopfwepfjwe")
        - Web   : Works on web.
        - Token : Just converting complex JSON object into a string.
        - I/p JSON OBJECT -> Complex one string representing the entire JSON object.
    }

    3. Local Storage { WHAT HAPPENS IN THE FRONTEND AND THE BACKEND
        - User sends password to the backend via frontend.
        - Server checks that password in the database and passes back a JWT string.
        - Now this is very essential, JWT strings are very important and they are locally stored in the browser local storage.
        - Now every-time a user sends a request, this JWT token is used to auhenticate the user and send back the response.
        - Through this logging in and doing everything is not required all the time.
        - Users do it once and the JWT token stays until the user logs out i.e the JWT Token string has been removed.
        - This is fucking good frontend engineering.  
    }

    4. [IMP] authbackend.js {
        Create a website that has 2 endpoints {
            1. POST "/signin" -> Body {
                username: string,
                password: string
            }
            2. GET "/users" -> Header {
                Auth Header: if(token==correct): returns array of all users  else: return 403
            }
        }
    }

    5. Databases {
        - In-memory : Server crashes -> data lost.
        - This is why I need to make databases.
        - Also in-memory is stupid, it cant be dynamic.
        - Databases can be dynamic.
        - User cannot talk to the database directly, it is always through a server.
        - Different DBs: Graph DBs, Vector DBs, SQL DBs, NoSQL DBs.
    }

    6. MongoDB {
        - Allows multidatabase.
        - table creation => can be done.
        - JSON data-dumping in tables => easily possible.
        - **IMP** it is schemaless -> Schema can be changed and modified easily.
        - This is why it can scale well.
    }

    7. How does the backend connect to the database? {
        a. express creates an HTTP Server.
        b. JSONWebTokens library lets me create jets.
        c. Mongoose lets me connect the dbs to this express http server.
    }

    8. dbsBasic.js { Create a backend architecture with mongoose that can communicate with the database present at MongoDB and can perform 3 of the foll reqs.
        - /signup       -> req: (username, password, first + last name) | if(user != exists): [res: (information stored i.e added to the database)] else: console.log(user exists).
        - /signin       -> req: (username + password) | res: jwt token.
        - /user(header) -> req: (jwt token in header) | res: user-data shown from mongoDB in the output.
    }


}